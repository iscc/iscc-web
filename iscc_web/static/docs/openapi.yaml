openapi: 3.0.3
info:
  title: ISCC-WEB Generator API
  description: Simple ISCC Generator Service
  version: 0.1.0
servers:
- url: /api/v1
tags:
- name: iscc
  description: Create standard ISCCs from media files.
- name: media
  description: Upload, download or delete media files.
- name: metadata
  description: Extract or embed metadata in media files.
- name: explain
  description: Decompose ISCC and return various representations.
paths:
  /iscc:
    post:
      operationId: create-iscc
      summary: Create ISCC
      description: Upload a file for ISCC processing.
      tags:
      - iscc
      parameters:
      - name: X-Upload-Filename
        in: header
        description: Base64 encoded file name of the uploaded file.
        required: true
        schema:
          type: string
          example: eW91ci1tZWRpYS1maWxlLmpwZw==
      requestBody:
        description: The raw file data (not form encoded).
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
        required: true
      responses:
        201:
          description: Created
          headers:
            Location:
              description: Root-relative link to created media resource
              schema:
                type: string
                format: uri-reference
                example: /api/v1/media/061kcmrj55fi8
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IsccMetadata'
        400:
          description: Bad Request
        422:
          description: Unprocessable Entity - ISCC processsing error.
  /iscc/{media_id}:
    get:
      operationId: get-iscc
      summary: Get ISCC
      description: Get ISCC for media_id
      tags:
      - iscc
      parameters:
      - name: media_id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/MediaID'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IsccMetadata'
        404:
          description: Not Found
  /media:
    post:
      operationId: upload-file
      summary: Upload file
      description: Upload a file for ISCC processing.
      tags:
      - media
      parameters:
      - name: X-Upload-Filename
        in: header
        description: Base64 encoded file name of the uploaded file.
        required: true
        schema:
          type: string
          example: eW91ci1tZWRpYS1maWxlLmpwZw==
      requestBody:
        description: The raw file data (not form encoded)
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
        required: true
      responses:
        201:
          description: Created
          headers:
            Location:
              description: Root-relative link to created resource
              schema:
                type: string
                format: uri-reference
                example: /api/v1/media/061kcmrj55fi8
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResponse'
        400:
          description: Bad Request
  /media/{media_id}:
    get:
      operationId: download-file
      summary: Download file
      description: Download processed file.
      tags:
      - media
      parameters:
      - name: media_id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/MediaID'
      responses:
        200:
          description: Ok
        403:
          description: Forbidden - If the server is configured with `ISCC_WEB_PRIVATE_FILES=true`
            you will get a 403 Forbidden error if you try to download a file that was not
            uploaded by you.
        404:
          description: File not found
    delete:
      operationId: delete-file
      summary: Delete file
      tags:
      - media
      parameters:
      - name: media_id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/MediaID'
      responses:
        204:
          description: No Content
        403:
          description: Forbidden
        404:
          description: File not found
  /metadata/{media_id}:
    get:
      operationId: extract-metadata
      summary: Extract Metadata
      description: Extract embedded metadata from media file
      tags:
      - metadata
      parameters:
      - name: media_id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/MediaID'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InlineMetadata'
        404:
          description: Not Found
    post:
      operationId: embed-metadata
      summary: Embed Metadata
      description: Embed metadata into media file and reproccess ISCC. The original media
        file will not be modified. Instead a copy is created with a new `media_id`. The link
        to the new media file is in the `content` field of the response. **You should offer
        the user a way to download the new media file that has the metadata embedded**.
      tags:
      - metadata
      parameters:
      - name: media_id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/MediaID'
      requestBody:
        description: Metadata for embedding
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InlineMetadata'
        required: true
      responses:
        201:
          description: Created
          headers:
            Location:
              description: Root-relative link to created resource
              schema:
                type: string
                format: uri-reference
                example: /api/v1/media/061kcmrj55fi8
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IsccMetadata'
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        422:
          description: Unprocessable Entity - ISCC processsing error.
  /explain/{iscc}:
    get:
      operationId: explain-iscc
      summary: Explain ISCC
      description: Decomposes and shows the structure of an ISCC
      tags:
      - explain
      parameters:
      - name: iscc
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Iscc'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IsccDetail'
        400:
          description: Bad Request
components:
  schemas:
    MediaID:
      description: ID for an uploaded file generated by server for each upload event.
      type: string
      minLength: 13
      maxLength: 13
      pattern: '[a-v0-9]{13}$'
      example: 061kcmrj55fi8
    Iscc:
      type: string
      description: An **ISCC** in canonical representation. This is the minimal required field
        for a valid ISCC Metadata object.
      example: ISCC:KACYPXW445FTYNJ3CYSXHAFJMA2HUWULUNRFE3BLHRSCXYH2M5AEGQY
      minLength: 15
      maxLength: 73
      pattern: ^ISCC:[A-Z2-7]{10,73}$
    UploadResponse:
      description: Information required to download the newly created media resource.
      type: object
      properties:
        content:
          type: string
          format: uri-reference
          example: http://localhost:8000/api/v1/media/061knt35ejv6o
        media_id:
          $ref: '#/components/schemas/MediaID'
    IsccMetadata:
      description: '[ISCC Metadata](https://schema.iscc.codes) (JSON-LD)'
      allOf:
      - $ref: '#/components/schemas/BasicMetadata'
      - $ref: '#/components/schemas/UploadResponse'
      - $ref: '#/components/schemas/InlineMetadata'
      - $ref: '#/components/schemas/TechnicalMetadata'
    BasicMetadata:
      description: Minimal ISCC Metadata
      type: object
      properties:
        '@context':
          type: string
          format: uri
          example: http://purl.org/iscc/context/0.4.0.jsonld
          description: The [JSON-LD](https://json-ld.org/) Context URI for ISCC metadata.
        '@type':
          type: string
          default: CreativeWork
          enum:
          - CreativeWork
          - TextDigitalDocument
          - ImageObject
          - AudioObject
          - VideoObject
          description: The type of digital content according to schema.org classes (TextDigitalDocument,
            ImageObject, AudioObject, VideoObject).
        $schema:
          type: string
          format: uri
          example: http://purl.org/iscc/schema/0.4.0.json
          description: The [JSON Schema](https://json-schema.org/) URI for ISCC metadata.
        iscc:
          $ref: '#/components/schemas/Iscc'
    InlineMetadata:
      type: object
      description: Metadata intended to be embedded into the media asset.
      properties:
        name:
          type: string
          maxLength: 128
          example: The Never Ending Story
          description: The title or name of the intangible creation manifested by the identified
            *digital content*. **Used as input for ISCC Meta-Code generation**.
        description:
          type: string
          example: a 1984 fantasy film co-written and directed by *Wolfgang Petersen*
          maxLength: 4096
          description: Description of the *digital content* identified by the **ISCC**. **Used
            as input for ISCC Meta-Code generation**. Any user presentable text string (including
            Markdown text) indicative of the identity  of the referent may be used.
        meta:
          type: string
          maxLength: 16384
          example: data:application/json;charset=utf-8;base64,eyJleHRlbmRlZCI6Im1ldGFkYXRhIn0=
          description: Subject, industry, or use-case specific metadata encoded as Data-URL.
        creator:
          description: An entity primarily responsible for making the resource.
          type: string
          example: Joanne K. Rowling
        license:
          type: string
          description: URI of license for the identified *digital content*.
          example: https://example.com/license-terms-for-this-item
        acquire:
          type: string
          format: uri
          description: This field must contain a valid URL referring to a page showing information
            about how one can acquire a license for the item. This may be a page of a web
            shop or NFT marketplace ready for providing a license.
          example: https://example.com/buy-license-for-item-here
        credit:
          type: string
          description: A line of text that you expect users of the image (such as Google Images)
            to display alongside the image.
          example: Frank Farian - Getty Images
        rights:
          type: string
          description: Contains any necessary copyright notice and should identify the current
            owner of the copyright of this work with associated intellectual property rights.
          example: Copyright 2022 ISCC Foundation - www.iscc.codes
        keywords:
          oneOf:
          - type: string
          - type: array
            items:
            - type: string
          description: Keywords or tags used to describe this content. Multiple entries in
            a keywords list are typically delimited by commas.
    TechnicalMetadata:
      type: object
      description: Technical ISCC Metadata automaticaly inferred from the media file by the
        ISCC processor
      properties:
        mode:
          description: The perceptual mode used to create the ISCC.
          type: string
          enum:
          - text
          - image
          - audio
          - video
          - mixed
          example: image
        filename:
          description: Filename of the referenced **digital content**
          type: string
          example: your-media-file.jpg
        filesize:
          description: File size of media asset in number of bytes.
          type: integer
        mediatype:
          description: An [IANA Media Type](https://www.iana.org/assignments/media-types/media-types.xhtml)
            (MIME type)
          type: string
          example: image/jpeg
        duration:
          description: Duration of audio-visual media in seconds.
          type: integer
          example: 60
        fps:
          description: Frames per second of video assets.
          type: number
          format: float
          example: 24
          minimum: 1
        width:
          description: Width of visual media in number of pixels.
          type: integer
          format: int32
          example: 640
        height:
          description: Height of visual media in number of pixels.
          type: integer
          format: int32
          example: 480
          minimum: 1
        characters:
          description: Number of text characters (code points after Unicode normalization)
          type: integer
          example: 55689
        language:
          description: Primary language of content [BCP 47](https://tools.ietf.org/search/bcp47).
          type: string
          example: en-US
        thumbnail:
          description: URI an autogenerated user-presentable thumbnail-image that serves as
            a preview of the digital content. The URI may be a Data-URL RFC2397.
          type: string
          format: uri
          example: https://picsum.photos/200/300.jpg
    IsccDetail:
      type: object
      description: Detailed decomposition of an ISCC
      properties:
        iscc:
          $ref: '#/components/schemas/Iscc'
        readable:
          description: Human readable version of ISCC
          type: string
          example: ISCC-VIDEO-V0-MSDI-c8a70639eb1167b367a9c3787c65c1e582e2e662f728b4fa42485e3a0a5d2f34
        multiformat:
          description: Multiformats representation base64url representation of ISCC
          type: string
          example: uzAFTBsinBjnrEWezZ6nDeHxlweWC4uZi9yi0-kJIXjoKXS80
        decomposed:
          description: ISCC decomomposed into a dash seperated secquence of ISCC-UNITs
          type: string
          example: AAA4RJYGHHVRCZ5T-CMAWPKODPB6GLQPF-GAAYFYXGML3SRNH2-IAAUESC6HIFF2LZU
        units:
          description: Different representations of the individial units of the ISCC
          type: array
          items:
            type: object
            description: An ISCC-UNIT in different representations
            properties:
              iscc_unit:
                description: Canonical representation of ISCC-UNIT
                type: string
                example: ISCC:AAA4RJYGHHVRCZ5T
              readable:
                description: Human readable version of ISCC-UNIT
                type: string
                example: META-NONE-V0-64-c8a70639eb1167b3
              hash_hex:
                description: Hex representation of ISCC-BODY
                type: string
                example: e1fb7dc4e3dbb4be
              hash_uint:
                description: Unsigned integer representation of ISCC-BODY
                type: string
                example: '16283747162278048958'
              hash_bits:
                description: Bitpattern of ISCC-BODY
                type: string
                example: '1110000111111011011111011100010011100011110110111011010010111110'
